digraph execflow {

// title
labelloc="t";
label="Imogen execution flowchart"

node[shape=box labeljust="l"]

START [label="./imogen serial runfile n\l	-> invokes matlab -r parImogenLoad(runfile, ...)\l./imogen parallel runfile n NP\l	-> invokes mpirun -np NP matlab -r parImogenLoad(runfile, ...)\l./imogen cluster runfile n nodes ppn NP\l	-> Submits the above to batch processor\l"];

START -> PARIMOGENLOAD

PARIMOGENLOAD[label="parImogenLoad:\l	(1) Initialize runtimes (MPI, CUDA)\l	(2) run simulations\l	(3) If scripted, shutdown & exit\l"];

PARIMOGENLOAD -> STARTRUN [label=" (1) starterRun(gpuinfo)"];
PARIMOGENLOAD -> EVALBOX [label=" (2) try { eval(runfile); }"];


STARTRUN [label=<(1) Add paths<br/><font color="blue">(2) Initialize MPI runtime;</font><br/>	<font color="blue">Get topology &amp; context</font><br/><font color="green">(3) Create global GPUManager class</font><br/><font color="green">	selectGPUs(gpuSet) &amp; test usability</font>>];

EVALBOX [label="At this point we have all Imogen paths in the Matlab search path. We have\l  access to the GPU through the GPU_Type, MPI through mpi_ wrapper functions,\l  and low-level access to our parallel subsystem through ParallelGlobal's data fields.\l\l  We do NOT have a directory to save things to, we do NOT have any Imogen file\l  logger stuff so fprintf() has to suffice\l"];

EVALBOX -> THERUNFILE [label="In the runfile script"];

THERUNFILE [label="(1) Create a simulation type initializer w/global domain resolution, e.g.\l	run = JetInitializer([nx ny nz])\l	* [nx ny nz], [nx ny 1], [nx 1 nz] are permissible\l(2) Set parameters on Initializer\l(3) Create any peripherals (e.g. RealtimePlotter) & attach them\l(4) Requests initial parameters be stored to file or IC structure\l"];

THERUNFILE -> INITIALIZER [label=" (1)"];

INITIALIZER [label="Initializer creation\lStorage for all input parameters for the run\l"];

INITIALIZER -> GEOMGR [label=<<font color="blue">self.geomgr = GeometryManager([nx ny nz]);</font>>];

GEOMGR [label="(1) Partition data per node\l(2) Compute local index sets\l(3) Compute absolute positions & geometric factors\l"];

THERUNFILE -> IMOGENCALL [label=" (5) imogen(icStruct)\limogen(icFile)\l"];

IMOGENCALL [label="imogen(srcdata, resumeInfo):\l	(1) Initialize simulation\l	(2) Iterate\l	(3) Finalize\l"];

IMOGENCALL -> RUNINIT [label=" (1a) run = ImogenManager(IC.ini)\l"];
IMOGENCALL -> RESULTPATHS [label=" (1b) initializeResultPaths(run, IC)\l"];

RUNINIT [label=<(1) Create ImogenManager class and subsidiary classes<br/>	(2) Setup GeometryManager from pickled IC state<br/>	(3) set the # of FluidManagers<br/>	<font color="red">(4) Set the run.bcModes struct</font>>];

RESULTPATHS [label="create dir..."];

RUNINIT -> IMOGENMANAGER [label=" (1)"];

IMOGENMANAGER [label=<(1) creates peripheral list<br/><font color="red">(2) creates obj.bc = BCManager();</font><br/>...>];

IMOGENMANAGER -> BCMANAGER;

BCMANAGER [label=<<font color="red">BCManager exists to have .attachBoundaryConditions()<br/>method called: does .populateBCModes</font>>];

BCMANAGER -> POPMODES [label="populateBCModes()"];

POPMODES [fontcolor="red" label="Trawl through the BC modes struct\lExplicitly enumerate all elements\lAll interior edges of rank's domain are reset to CIRCULAR\lAll edges marked circular have .bcHaloShare bits set\l"];

RELOADPATH [label="Load named data frames\lOverwrite run.time\l"];

IMOGENCALL -> RELOADPATH [label=" (1c) If restarting"];

RELOADPATH -> UPLOADARRAYS [label=" (1c) "];
IMOGENCALL -> UPLOADARRAYS [label=" (1c) if new"];

UPLOADARRAYS [label=<<font color="green">uploadDataArrays(FieldSource, run, statics)<br/>	(1) Create N empty FluidManager classes<br/>	(2) Allocate GPU data slab and upload</font><br/>	(3) fluid(F).processFluidDetails>];

UPLOADARRAYS -> FLUIDARRAYCLASS [label=" (2)"];

FLUIDARRAYCLASS [label=<FluidArray is a slightly adorned ImogenArray<br/>	<font color="red">(1) attaches BCs</font><br/>	(2) obj.initialArray<br/>  -&gt; does initial parallel sync<br/>  -&gt; <font color="red">calls obj.setupBoundaries</font><br/>  -&gt; <font color="red">applies BCs for 1st time</font>>];

FLUIDARRAYCLASS -> BCMANAGER [label=".attachBoundaryConditions()"];

FLUIDARRAYCLASS -> SETUPBOUNDARIES [label="obj.setupBoundaries()"];

SETUPBOUNDARIES [label=<processes statics for array<br/><font color="red">Calls Edges(modes, array, 0, geometry)</font><br/>to get possible additional statics<br/><font color="red">creates boundaryData object</font>>];

IMOGENCALL -> DOINIT [label=" (1d) run.initialize(IC, mag)"];

DOINIT [label="* calls .initialize of every peripheral\l* calls ImageManager.initialize\l* calls each FluidManager.initialize\l* calls SelfGravity.initialize()\l* calls PotentialField.initialize\l* calls frameTracking.initialize"];

IMOGENCALL -> FLUIDLOOP [label=" (2) Enter fluid loop"];
FLUIDLOOP [label="(1) Compute timestep\l(2) Checkpoint?\l(3) exp(permutation([F G H]) dt)*psi\l    (per fluid)\l\l(4) source(psi)\l(5) exp(permutation([H G F]) dt ) psi\l(6) Check physicality; Restore checkpt?\l(7) Advance time\l(8) Poll event list\l"];

FLUIDLOOP -> TIMESTEP [label=" (1)"];
TIMESTEP [label="Computes c_s everywhere\lcall cflTimestep() to find explicit Euler dt\laccounts for: flux algo, geometry\lDoes not account for\ld/dt(T_cfl): can crash if v. fast\lchange in conditions"];

FLUIDLOOP -> CHECKPOINTER [label=" (2)"];
CHECKPOINTER [label="store state copy on CPU\lcheck for unphysical (== rho < 0, T < 0)\lconditions\lIf found, restore backup\lReduces CFL aggressively,\lraises toward original conservatively\l"];

FLUIDLOOP -> FLUXER [label=" (3)"];

FLUXER [label="fluxer: compiled routine\l   1) setup 1st axis\l 2) run through all 3 axes\l 3) return to XYZ array orientation\l"]

FLUXER -> ARRAY_ROTATER [label=" (1) possible\lprepermutate\l"];

FLUXER -> FLUXBLOCK [label=" (2) flux block"];

FLUXBLOCK [label=<for N=1:3:<br/>(1) flux<br/><font color="red">(2) assert BCs</font><br/><font color="blue">(3) exchange MPI halos</font><br/>(4) rotate arrays>];

FLUXBLOCK -> FLUX1D [label=" (1) solve u_t+F(u)_x=0 in 1D"];
FLUXBLOCK -> SET_BCS [label=" (2) setFluidBoundary()"];
FLUXBLOCK -> SYNC_HALOS [label=" (3) cudaHaloExchange()"];
FLUXBLOCK -> ARRAY_ROTATER [label=" (4)"];

FLUXER -> ARRAY_ROTATER [label=" (3) possible\lpost-permutate\n"];


ARRAY_ROTATER [label="flipArrayIndices()"];
FLUX1D [label="(1) perform fluxing\l(2) exchange inter-GPU halos\l"];

SET_BCS [label=<<font color="red">For both faces of given direction,<br/>If bcMode[face,dir] is \"outflow\" setOutflowCondition<br/>If bcMode[face,dir] is not, setBoundaryConditions()</font>>];

FLUX1D -> XINJIN [label=" (1) XJ method"];
FLUX1D -> GODUNOV [label=" (1) HLL/HLLC"];

XINJIN [label="calculate c_freeze\lupwind step\lcalculate c_f\lcorrection step\l"];
GODUNOV [label="HLL? Solve pressure\lInvoke time method 1st stage\lHLL? Solve pressure\lInvoke time method 2nd stage\l"];

FLUX1D -> MGAHALOSYNC [label=" (2) MGA_exchangeLocalHalos"];

MGAHALOSYNC [label="For partition i,\lcopy partition (i-1) RHS to i's LHS\lcop partition (i+1) LHS to i's RHS\l"];

SYNC_HALOS [label="Inter-rank halo exchange"];

FLUIDLOOP -> SOURCE [label=" (4) Compute nonconservative\levolution equation terms"];
SOURCE [label="source.m: top-level\lsourcing control"]

FLUIDLOOP -> FLUXER [label=" (5)"];
FLUIDLOOP -> CHECKPOINTER [label=" (6)"];
FLUIDLOOP -> TIMESTEP [label=" (7)"];

SOURCE -> SRC_COMPOSITE;
SOURCE -> SRC_VTO;
SOURCE -> SRC_RADIATION;

SRC_COMPOSITE [label="cudaTestSourceComposite\lSimultaneously solves:\l   gravity\l   frame rotation\l    cylindrical geometric terms\l"]
SRC_VTO [label="vacuum taffy operator\lkeep 'vacuum' well behaved\l"];
SRC_RADIATION [label="energy sink due to thin radiation"];

IMOGENCALL -> RUNFINAL [label=" (3)"];

RUNFINAL [label="run.finalize"];

}
